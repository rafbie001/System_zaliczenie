{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor do dodawania tokenu do każdego żądania\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor do obsługi błędów autoryzacji\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Funkcje API dla autoryzacji\nexport const login = async (username, password) => {\n  const formData = new FormData();\n  formData.append('username', username);\n  formData.append('password', password);\n  const response = await api.post('/token', formData);\n  return response.data;\n};\n\n// Funkcje API dla zespołów\nexport const getTeams = async () => {\n  const response = await api.get('/api/teams');\n  return response.data;\n};\nexport const createTeam = async teamData => {\n  const response = await api.post('/api/teams', teamData);\n  return response.data;\n};\nexport const updateTeam = async (teamId, teamData) => {\n  const response = await api.put(`/api/teams/${teamId}`, teamData);\n  return response.data;\n};\nexport const deleteTeam = async teamId => {\n  const response = await api.delete(`/api/teams/${teamId}`);\n  return response.data;\n};\n\n// Funkcje API dla zgłoszeń\nexport const getDispatches = async () => {\n  const response = await api.get('/api/dispatches');\n  return response.data;\n};\nexport const createDispatch = async dispatchData => {\n  const response = await api.post('/api/dispatches', dispatchData);\n  return response.data;\n};\nexport const getDispatch = async dispatchId => {\n  const response = await api.get(`/api/dispatches/${dispatchId}`);\n  return response.data;\n};\nexport const getMedicalForm = async dispatchId => {\n  const response = await api.get(`/api/dispatches/${dispatchId}/medical-form`);\n  return response.data;\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","login","username","password","formData","FormData","append","post","data","getTeams","get","createTeam","teamData","updateTeam","teamId","put","deleteTeam","delete","getDispatches","createDispatch","dispatchData","getDispatch","dispatchId","getMedicalForm"],"sources":["C:/Users/rafal/Desktop/dok/wat/TIM/pythonProject/frontend/dispatcher-web/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Interceptor do dodawania tokenu do każdego żądania\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Interceptor do obsługi błędów autoryzacji\r\napi.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n        if (error.response?.status === 401) {\r\n            localStorage.removeItem('token');\r\n            window.location.href = '/login';\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Funkcje API dla autoryzacji\r\nexport const login = async (username, password) => {\r\n    const formData = new FormData();\r\n    formData.append('username', username);\r\n    formData.append('password', password);\r\n    const response = await api.post('/token', formData);\r\n    return response.data;\r\n};\r\n\r\n// Funkcje API dla zespołów\r\nexport const getTeams = async () => {\r\n    const response = await api.get('/api/teams');\r\n    return response.data;\r\n};\r\n\r\nexport const createTeam = async (teamData) => {\r\n    const response = await api.post('/api/teams', teamData);\r\n    return response.data;\r\n};\r\n\r\nexport const updateTeam = async (teamId, teamData) => {\r\n    const response = await api.put(`/api/teams/${teamId}`, teamData);\r\n    return response.data;\r\n};\r\n\r\nexport const deleteTeam = async (teamId) => {\r\n    const response = await api.delete(`/api/teams/${teamId}`);\r\n    return response.data;\r\n};\r\n\r\n// Funkcje API dla zgłoszeń\r\nexport const getDispatches = async () => {\r\n    const response = await api.get('/api/dispatches');\r\n    return response.data;\r\n};\r\n\r\nexport const createDispatch = async (dispatchData) => {\r\n    const response = await api.post('/api/dispatches', dispatchData);\r\n    return response.data;\r\n};\r\n\r\nexport const getDispatch = async (dispatchId) => {\r\n    const response = await api.get(`/api/dispatches/${dispatchId}`);\r\n    return response.data;\r\n};\r\n\r\nexport const getMedicalForm = async (dispatchId) => {\r\n    const response = await api.get(`/api/dispatches/${dispatchId}/medical-form`);\r\n    return response.data;\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}